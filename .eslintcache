[{"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\index.js":"1","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\App.js":"2","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\DailyPic.js":"3","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\Home.js":"4","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\Mars.js":"5","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\NoMatch.js":"6","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\NaturalEvents.js":"7","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\components\\Layout.js":"8","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\components\\Jumbotron.js":"9","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\components\\NavigationBar.js":"10"},{"size":197,"mtime":1610390038564,"results":"11","hashOfConfig":"12"},{"size":2102,"mtime":1610510670137,"results":"13","hashOfConfig":"12"},{"size":9561,"mtime":1610943926768,"results":"14","hashOfConfig":"12"},{"size":15720,"mtime":1626826717068,"results":"15","hashOfConfig":"12"},{"size":19584,"mtime":1610980081164,"results":"16","hashOfConfig":"12"},{"size":127,"mtime":1597265568000,"results":"17","hashOfConfig":"12"},{"size":22102,"mtime":1610980074603,"results":"18","hashOfConfig":"12"},{"size":194,"mtime":1597019778000,"results":"19","hashOfConfig":"12"},{"size":1094,"mtime":1610488088356,"results":"20","hashOfConfig":"12"},{"size":2535,"mtime":1610393582766,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ijnp0l",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\index.js",[],["46","47"],"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\App.js",[],"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\DailyPic.js",["48"],"import React from 'react';\r\nimport {Button, Col, Row} from 'react-bootstrap';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport jumboDailyPic from './assets/jumboDaily.jpg';\r\nimport backgroundDailyPic from './assets/greenBackground.jpg';\r\n\r\nimport Particles from \"react-particles-js\";\r\n\r\nconst Styles = styled.div`\r\n  .imgContainer {\r\n    position: relative;\r\n    margin: auto;\r\n    overflow: hidden;\r\n    background-color:rgba(245, 220, 224,0.1);\r\n    background-size:cover;\r\n  }\r\n  .paragraphText {\r\n    position:relative;\r\n    margin:auto;\r\n    color:#d3d3d3;\r\n    text-align:justify;\r\n    font-size:14px;\r\n    margin-top: 15px;\r\n    max-width:90%;\r\n    transition:all 0.4s ease;\r\n    color:#ffffaf;\r\n    opacity: ${({btnClicked}) =>\r\n      ((btnClicked === true) && '0') ||\r\n      '1'\r\n    };\r\n  }\r\n  .buttonText {\r\n    position:relative;\r\n    margin:auto;\r\n    padding-bottom:10px;\r\n    top:50%;\r\n    font-size: 50px;\r\n    font-weight:100;\r\n    color:#f9e076;\r\n  }\r\n  .titleText {\r\n    position:relative;\r\n    margin:auto;\r\n    padding-bottom:15px;\r\n    padding-top:10px;\r\n    color:#f9e076;\r\n    text-align:center;\r\n    font-size:50px;\r\n    font-weight:750;\r\n    transition:all 0.4s ease;\r\n    opacity: ${({btnClicked}) =>\r\n      ((btnClicked === true) && '0.1') ||\r\n      '1'\r\n    };\r\n  }\r\n  .spaceImage {\r\n    position:relative;\r\n    margin:auto;\r\n    width:100%;\r\n    display: block;\r\n    height:475px;\r\n    width:auto;\r\n    transition:all 0.4s ease;\r\n    opacity: ${({btnClicked}) =>\r\n      ((btnClicked === true) && '0.1') ||\r\n      '1'\r\n    };\r\n  }\r\n  .backgroundContainer{\r\n    width:100%;\r\n    height: 100%;\r\n    background: rgb(20, 11, 40);\r\n    position: absolute;\r\n  }\r\n  .leftButton{\r\n       position: absolute;\r\n       margin:auto;\r\n       padding:0px;\r\n       padding-left:8px;\r\n       padding-right:2px;\r\n       right: 15px;\r\n       border-radius:7px;\r\n       background-color:#78005a;\r\n       outline:none;\r\n       border-width:3px;\r\n       border-color:#5a0096;\r\n       transition:all 0.3s ease;\r\n       &:hover{\r\n          box-shadow: inset 0 0 0 4px #5a0096;\r\n       }\r\n       &:active{\r\n        -webkit-transform: scale(0.9);\r\n        -ms-transform: scale(0.9);\r\n        transform: scale(0.9);\r\n       }\r\n    }\r\n    .rightButton{\r\n         position: absolute;\r\n         margin:auto;\r\n         padding:0px;\r\n         left: 15px;\r\n         padding-left:2px;\r\n         padding-right:8px;\r\n         border-radius:7px;\r\n         background-color: ${({styleDisable}) =>\r\n            ((styleDisable === true) && '#783c5a') ||\r\n            '#78005a'\r\n         };\r\n\r\n         outline:none;\r\n         border-width:3px;\r\n         border-color: ${({styleDisable}) =>\r\n            ((styleDisable === true) && '#5a1e3c') ||\r\n            '#5a0096'\r\n         };\r\n         transition:all 0.3s ease;\r\n         &:hover{\r\n            box-shadow: ${({styleDisable}) =>\r\n               ((styleDisable === true) && 'inset 0 0 0 4px #5a1e3c') ||\r\n               'inset 0 0 0 4px #5a0096'\r\n            };\r\n         }\r\n         &:active{\r\n         -webkit-transform: ${({styleDisable}) =>\r\n            ((styleDisable === true) && 'scale(1)') ||\r\n            'scale(0.9)'\r\n         };\r\n         -ms-transform: ${({styleDisable}) =>\r\n            ((styleDisable === true) && 'scale(1)') ||\r\n            'scale(0.9)'\r\n         };\r\n         transform: ${({styleDisable}) =>\r\n            ((styleDisable === true) && 'scale(1)') ||\r\n            'scale(0.9)'\r\n         };\r\n        }\r\n      }\r\n`;\r\nconst StyledCol = styled(Col)`\r\n  position:relative;\r\n  margin:auto;\r\n`;\r\nconst StyledRow = styled(Row)`\r\n  position:relative;\r\n  padding:0px;\r\n  margin:auto;\r\n`;\r\n\r\n\r\n\r\nclass DailyPic extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      width : 0,\r\n      height : 0,\r\n      pageDate: (new Date(((new Date()).getFullYear()),((new Date()).getMonth()),(((new Date()).getDate())-1))),\r\n      backgroundEarth:\"Loading Space\",\r\n      btnClicked:false,\r\n    };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await window.scrollTo(0, 0);\r\n    await this.updateWindowDimensions();\r\n    await window.addEventListener('resize', this.updateWindowDimensions);\r\n    let jumboHeader = \"Picture of the Day\";\r\n    let jumboText = \"Check out today's Astronomic Image\";\r\n    await this.props.onChangePage(backgroundDailyPic, jumboDailyPic, jumboHeader, jumboText);\r\n    await this.refreshBackgroundEarth();\r\n  }\r\n  async componentWillUnmount() {\r\n    await window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  async updateWindowDimensions() {\r\n    await this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n  async refreshBackgroundEarth(){\r\n    let urlL= \"https://api.nasa.gov/planetary/apod?date=\";\r\n    let urlR= \"&api_key=RhSXKj3CDHOwFcr4h7dZIPnX39GFJR8MUgjYNrKK\";\r\n    let formattedDate = (this.state.pageDate.getFullYear()) + \"-\" + (this.state.pageDate.getMonth()+1) + \"-\"+ (this.state.pageDate.getDate());\r\n    let urlFull = urlL + formattedDate + urlR;\r\n\r\n    let response = await fetch(urlFull);\r\n    this.backgroundEarth = await response.json();\r\n   setTimeout(function () {\r\n      this.setState({\r\n        backgroundEarth : this.backgroundEarth,\r\n        btnClicked: false,\r\n      });\r\n   }.bind(this), 130);\r\n  }\r\n  handleClickLeft = async () =>{\r\n    await this.setState({\r\n      pageDate: (new Date(this.state.pageDate.getFullYear(),this.state.pageDate.getMonth(),this.state.pageDate.getDate()-1)),\r\n      btnClicked: true,\r\n    });\r\n    await this.refreshBackgroundEarth();\r\n  }\r\n  handleClickRight = async () => {\r\n    await this.setState({\r\n      pageDate: (new Date(this.state.pageDate.getFullYear(),this.state.pageDate.getMonth(),this.state.pageDate.getDate()+1)),\r\n      btnClicked: true,\r\n    });\r\n    await this.refreshBackgroundEarth();\r\n  }\r\n  checkDate(){\r\n    let checkDate = new Date();\r\n    checkDate = (new Date(((new Date()).getFullYear()),((new Date()).getMonth()),(((new Date()).getDate())-1)));\r\n    return ((this.state.pageDate.getDate() === checkDate.getDate()) && (this.state.pageDate.getYear() === checkDate.getYear()) && this.state.pageDate.getMonth() === checkDate.getMonth());\r\n  }\r\n  returnNextDay(pageDate){\r\n     return (new Date(pageDate.getFullYear(), pageDate.getMonth(), pageDate.getDate()+1))\r\n }\r\n\r\n  render(){\r\n    return(\r\n      <Styles btnClicked={this.state.btnClicked} styleDisable={this.checkDate()} style={{minHeight:\"715px\", position:\"relative\", margin:\"auto\", paddingBottom:\"24px\"}} fluid>\r\n           <Particles className=\"backgroundContainer\" params={{\r\n         \t    \"particles\": {\r\n         \t        \"number\": {\r\n         \t            \"value\": 50,\r\n         \t        },\r\n                   \"color\": {\r\n                     \"value\": \"#f9e076\"\r\n                   },\r\n         \t        \"line_linked\": {\r\n         \t            \"enable\": true,\r\n         \t            \"opacity\": 0.01\r\n         \t        },\r\n         \t        \"move\": {\r\n         \t            \"speed\": 0.15\r\n         \t        },\r\n         \t        \"size\": {\r\n         \t            \"value\": 1.3\r\n         \t        },\r\n         \t        \"opacity\": {\r\n         \t            \"anim\": {\r\n         \t                \"enable\": true,\r\n         \t                \"speed\": 0.5,\r\n         \t                \"opacity_min\": 0.25\r\n         \t            }\r\n         \t        }\r\n         \t    },\r\n         \t    \"retina_detect\": true\r\n           }}/>\r\n          <StyledCol xl={2} lg={1} md={1} sm={0} xs={0}>\r\n          </StyledCol>\r\n          <StyledCol xl={9} lg={10} md={10} sm={12} xs={12}>\r\n              <StyledRow>\r\n               <div style={{position:\"relative\", margin:\"auto\"}}>\r\n                  <h1 className=\"titleText\">{this.state.backgroundEarth.title + \" (\" + (this.returnNextDay(this.state.pageDate).getDate()) + \"/\" + (this.returnNextDay(this.state.pageDate).getMonth()+1) + \"/\"+ (this.returnNextDay(this.state.pageDate).getFullYear()) + \")\"}</h1>\r\n               </div>\r\n              </StyledRow>\r\n              <StyledRow style={{marginTop:\"25px\"}}>\r\n               <StyledCol xl={1} lg={1} md={1} sm={1}>\r\n                 <button type=\"button\" className=\"leftButton\" onClick={this.handleClickLeft}>\r\n                   <h1 className=\"buttonText\">{\"<\"}</h1>\r\n                 </button>\r\n               </StyledCol>\r\n               <StyledCol xl={10} lg={10} md={10} sm={10}>\r\n                 <div className=\"imgContainer\">\r\n                    { (this.state.backgroundEarth.media_type===\"image\") ? (<img src={this.state.backgroundEarth.url} alt={this.state.backgroundEarth.title} className=\"spaceImage\"/>) : (<iframe alt={this.state.backgroundEarth.title} className=\"spaceImage\" style={{width:this.state.width/2}} title={this.state.backgroundEarth.title} src={this.state.backgroundEarth.url}></iframe>)}\r\n                 </div>\r\n               </StyledCol>\r\n               <StyledCol xl={1} lg={1} md={1} sm={1}>\r\n                 <button type=\"button\" className=\"rightButton\" onClick={this.handleClickRight} disabled={this.checkDate()}>\r\n                   <h1 className=\"buttonText\">{\">\"}</h1>\r\n                 </button>\r\n               </StyledCol>\r\n             </StyledRow>\r\n             <StyledRow>\r\n               <p className=\"paragraphText\">{this.state.backgroundEarth.explanation}</p>\r\n             </StyledRow>\r\n          </StyledCol>\r\n          <StyledCol xl={2} lg={1} md={1} sm={0} xs={0}></StyledCol>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\nexport default DailyPic;\r\n","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\Home.js",["49"],"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\Mars.js",["50","51"],"import React from 'react';\r\nimport {Card, Button, Col, Row} from 'react-bootstrap';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport BackgroundMars from './assets/backgroundMars.png';\r\nimport Gallery from \"react-photo-gallery\";\r\nimport EmptyMarsImage from \"./assets/emptyMarsImage.jpg\";\r\nimport Error from \"./assets/ErrorMars.png\";\r\nimport Curiosity from \"./assets/Curiosity.jpg\";\r\nimport jumboNaturalEvents from './assets/jumboMars.png';\r\nimport backgroundNaturalEvents from './assets/brownBackground.jpg';\r\nimport Loading from './assets/Loading.png';\r\nimport Particles from \"react-particles-js\";\r\n\r\nconst Styles = styled.div`\r\n\r\n  .weatherContainer {\r\n    position:relative;\r\n    margin:auto;\r\n    background: url(${BackgroundMars}) no-repeat;\r\n    background-size: cover;\r\n    padding-bottom:10px;\r\n    margin-bottom:20px;\r\n  }\r\n  .backgroundContainer{\r\n    width:100%;\r\n    height: 100%;\r\n    background: rgb(29, 11, 0);\r\n    position: absolute;\r\n  }\r\n  .curiosityContainer {\r\n       position: relative;\r\n       margin: auto;\r\n       overflow: hidden;\r\n       background-color:rgba(255, 255, 255,0.05);\r\n       margin-top:10px;\r\n       background-size:cover;\r\n       border: 10px solid rgba(255, 230, 234,0.06);\r\n       background-size:cover;\r\n  }\r\n  .curiosityImage{\r\n    position: relative;\r\n    margin: auto;\r\n    margin-bottom: 25px;\r\n    padding-top:15px;\r\n    height:auto;\r\n    width:100%;\r\n  }\r\n  .weatherImage {\r\n     display: block;\r\n\r\n     max-height:300px;\r\n     max-width:300px;\r\n\r\n     margin:auto;\r\n     margin-top:15px;\r\n  }\r\n  .titleText {\r\n    position: relative;\r\n    margin:auto;\r\n    color:#d3d3d3;\r\n    margin-bottom:0px;\r\n    text-align:center;\r\n    font-size:25px;\r\n    font-weight:450;\r\n    text-decoration: underline;\r\n  }\r\n  .cardType{\r\n    font-weight:bolder;\r\n    text-decoration:underline;\r\n  }\r\n  .cardAverage{\r\n    font-weight:1;\r\n    font-size: 44px;\r\n  }\r\n  .cardCount{\r\n    font-size: 8px;\r\n    font-style: italic;\r\n  }\r\n .leftText{\r\n    position: relative;\r\n    text-align:right;\r\n    margin:auto;\r\n    font-size:31px;\r\n    font-weight:600;\r\n    color:#A9A9A9;\r\n }\r\n.backgroundContainer{\r\n   width:100%;\r\n   height: 100%;\r\n   position: absolute;\r\n}\r\n .rightText{\r\n    position: relative;\r\n    text-align:left;\r\n    margin:auto;\r\n    margin-top:7px;\r\n    font-size:18px;\r\n    color:#DDDDDD;\r\n    font-weight:400;\r\n }\r\n`;\r\nconst StyledCol = styled(Col)`\r\n  position:relative;\r\n  margin:auto;\r\n  overflow: hidden;\r\n`;\r\nconst StyledRow = styled(Row)`\r\n  position:relative;\r\n  padding:0px;\r\n  margin:auto;\r\n`;\r\nconst StyledCard = styled(Card)`\r\n  position:relative;\r\n  width:${props => (((props.windowwidth/6))+\"px\")};\r\n  background: rgba(0, 0, 0, 0.3);\r\n  border-width: 0px;\r\n  color:rgb(255,245,238);\r\n  margin-top:10px;\r\n  text-align:center;\r\n  border-radius:100px;\r\n`;\r\nconst TitleCol = styled(Col)`\r\n  position:relative;\r\n  margin:auto;\r\n  text-align:center;\r\n  margin-top:15px;\r\n  margin-bottom:0px;\r\n`;\r\nconst TextCol = styled(Col)`\r\n  position:relative;\r\n  margin:auto;\r\n  margin-top:0px;\r\n`;\r\nconst RoverHelpButton = styled(Button)`\r\n   position: relative;\r\n   margin:auto;\r\n   margin-top:17px;\r\n   margin-left:5px;\r\n   color:#A9A9A9;\r\n   padding:0px;\r\n   padding-left:5px;\r\n   padding-right:5px;\r\n   background-color:#000000;\r\n   font-size:10px;\r\n   font-weight:200;\r\n   transition:all 0.2s ease;\r\n`;\r\n\r\n\r\nclass Mars extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      width : 0,\r\n      height : 0,\r\n      yesterday: (new Date(((new Date()).getFullYear()),((new Date()).getMonth()),(((new Date()).getDate())-7))),\r\n\r\n      dataWeather: \"Loading Weather Data\",\r\n\r\n      cameraArray:[\"FHAZ\", \"RHAZ\", \"MAST\", \"CHEMCAM\", \"MAHLI\", \"MARDI\", \"NAVCAM\"],\r\n      dataCamera: [\"loading Data\", \"loading Data\", \"loading Data\", \"loading Data\", \"loading Data\", \"loading Data\", \"loading Data\"],\r\n      currPhotoNum: [0,0,0,0,0,0,0],\r\n      totalPhotoNum: [0,0,0,0,0,0,0],\r\n      galleryImage: [[{src: Loading, width: 1, height: 1}],[{src: EmptyMarsImage, width: 1, height: 1}],[{src: EmptyMarsImage, width: 1, height: 1}],[{src: EmptyMarsImage, width: 1, height: 1}]],\r\n      totalPhotosTaken: \"Loading\",\r\n      roverHelpButtonClicked:false,\r\n    };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await window.scrollTo(0, 0);\r\n    await this.updateWindowDimensions();\r\n    await window.addEventListener('resize', this.updateWindowDimensions);\r\n    let jumboHeader = \"The Red Planet\";\r\n    let jumboText = \"Find out today's weather & photos of Mars\";\r\n    await this.props.onChangePage(backgroundNaturalEvents, jumboNaturalEvents, jumboHeader, jumboText);\r\n\r\n    let urlWeather = \"https://api.nasa.gov/insight_weather/?api_key=Tk2oVQALMndvKdMKB6ToE6YIddcS3qBnedrfwVL4&feedtype=json&ver=1.0\";\r\n    let responseWeather = await fetch(urlWeather);\r\n    this.dataWeather = await responseWeather.json();\r\n\r\n    let leftUrlCamera = \"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=\";\r\n    let rightUrlCamera = \"&api_key=PQ1YEa7YzQtsYTGyynEFVOQSmxdIDFCMNW8IMCRj&feedtype=json&ver=1.0\";\r\n    let formattedDate = (this.state.yesterday.getFullYear()) + \"-\" + (this.state.yesterday.getMonth()+1) + \"-\"+ (this.state.yesterday.getDate());\r\n    formattedDate=\"2020-02-02\"\r\n    this.dataCamera = [];\r\n    this.totalPhotoNum = [];\r\n    for(let i = 0; i < 7; i++){\r\n      let responseCamera = await fetch(leftUrlCamera + formattedDate +\"&camera=\" + this.state.cameraArray[i] + rightUrlCamera);\r\n      let jsonCamera = await responseCamera.json();\r\n      this.dataCamera[i] = await jsonCamera;\r\n      this.totalPhotoNum[i] = await jsonCamera.photos.length;\r\n    };\r\n\r\n     let urlNumPhotos = \"https://api.nasa.gov/mars-photos/api/v1/manifests/Curiosity?&api_key=MfHQYVpalCpvawhEUdjsedukFCwE7PMa9WNNvHWk\";\r\n     let responseNumPhotos = await fetch(urlNumPhotos);\r\n     let numPhotosJson = await responseNumPhotos.json();\r\n     this.totalPhotosTaken = numPhotosJson.photo_manifest.total_photos;\r\n\r\n    await this.setState({\r\n      dataWeather : this.dataWeather,\r\n      dataCamera : this.dataCamera,\r\n      totalPhotoNum : this.totalPhotoNum,\r\n      totalPhotosTaken: this.totalPhotosTaken,\r\n      empty: false,\r\n    });\r\n    this.initializePhotos();\r\n  }\r\n\r\n  async componentWillUnmount() {\r\n    await window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  async updateWindowDimensions() {\r\n    await this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n  weatherCard(cardName){\r\n      let uniqueReturn = [];\r\n      let apiData = 0;\r\n      try{\r\n         apiData = this.state.dataWeather[this.state.dataWeather.sol_keys[0]];\r\n         if(cardName===\"Temperature\"){\r\n           uniqueReturn.push(<span className=\"cardAverage\">{(1.8*apiData.AT.av +32).toFixed(1) + \"°F\"}</span>);\r\n           uniqueReturn.push(<br  style={{marginBottom:\"18px\"}}/>);\r\n           uniqueReturn.push(\"Min: \" + (1.8*apiData.AT.mn +32).toFixed(1));\r\n           uniqueReturn.push(<br/>);\r\n           uniqueReturn.push(\"Max: \" + (1.8*apiData.AT.mx +32).toFixed(1));\r\n           uniqueReturn.push(<br style={{marginBottom:\"12px\"}}/>);\r\n           uniqueReturn.push(<span className=\"cardCount\">{\"Counted \" + apiData.AT.ct + \" times\"}</span>);\r\n         }else if(cardName===\"Wind Speed\"){\r\n           uniqueReturn.push(<span className=\"cardAverage\">{apiData.HWS.av.toFixed(1) + \" m/s\"}</span>);\r\n           uniqueReturn.push(<br  style={{marginBottom:\"18px\"}}/>);\r\n           uniqueReturn.push(\"Min: \" + apiData.HWS.mn.toFixed(1));\r\n           uniqueReturn.push(<br/>);\r\n           uniqueReturn.push(\"Max: \" + apiData.HWS.mx.toFixed(1));\r\n           uniqueReturn.push(<br style={{marginBottom:\"12px\"}}/>);\r\n           uniqueReturn.push(<span className=\"cardCount\">{\"Counted \" + apiData.HWS.ct + \" times\"}</span>);\r\n         }else if(cardName===\"Atmospheric Pressure\"){\r\n           uniqueReturn.push(<span className=\"cardAverage\">{apiData.PRE.av.toFixed(1) + \" Pa\"}</span>);\r\n           uniqueReturn.push(<br  style={{marginBottom:\"18px\"}}/>);\r\n           uniqueReturn.push(\"Min: \" + apiData.PRE.mn.toFixed(1));\r\n           uniqueReturn.push(<br/>);\r\n           uniqueReturn.push(\"Max: \" + apiData.PRE.mx.toFixed(1));\r\n           uniqueReturn.push(<br style={{marginBottom:\"12px\"}}/>);\r\n           uniqueReturn.push(<span className=\"cardCount\">{\"Counted \" + apiData.PRE.ct + \" times\"}</span>);\r\n         }else if(cardName===\"Wind Direction\"){\r\n           console.log(apiData.WD);\r\n           uniqueReturn.push(<span className=\"cardAverage\">{apiData.WD.most_common.compass_degrees.toFixed(1) + \"°\"}</span>);\r\n           uniqueReturn.push(<br  style={{marginBottom:\"18px\"}}/>);\r\n           let firstDirection = this.checkDirection(apiData.WD.most_common.compass_point[0]);\r\n           let secondDirection = this.checkDirection(apiData.WD.most_common.compass_point[1]);\r\n           let thirdDirection = \"\";\r\n           if(apiData.WD.most_common.compass_point.length === 3)\r\n             thirdDirection = this.checkDirection(apiData.WD.most_common.compass_point[2]);\r\n           uniqueReturn.push(firstDirection + \"-\" + secondDirection + thirdDirection.toLowerCase());\r\n           uniqueReturn.push(<br/>);\r\n           uniqueReturn.push(<br style={{marginBottom:\"12px\"}}/>);\r\n           uniqueReturn.push(<span className=\"cardCount\">{\"Counted \" + apiData.WD.most_common.ct + \" times\"}</span>);\r\n         }else if(cardName===\"Season\"){\r\n           uniqueReturn.push(<br style={{marginBottom:\"18px\"}}/>);\r\n           uniqueReturn.push(<span className=\"cardAverage\">{apiData.Season[0].toUpperCase() + apiData.Season.substring(1)}</span>);\r\n           uniqueReturn.push(<br style={{marginBottom:\"12px\"}}/>);\r\n           uniqueReturn.push(<br/>);\r\n           uniqueReturn.push(<span className=\"cardCount\" style={{color:\"rgba(0,0,0,0)\"}}>{\"Counted  times\"}</span>);\r\n         }\r\n      }\r\n      catch(Exception){\r\n        uniqueReturn.push(<span className=\"cardAverage\">{(apiData===0) ? \"Loading\": \"N/A\"}</span>);\r\n        uniqueReturn.push(<br  style={{marginBottom:\"18px\"}}/>);\r\n        uniqueReturn.push(\"Min: \" + ((apiData===0) ? \"Loading\": \"N/A\"));\r\n        uniqueReturn.push(<br/>);\r\n        uniqueReturn.push(\"Max: \" + ((apiData===0) ? \"Loading\": \"N/A\"));\r\n        uniqueReturn.push(<br style={{marginBottom:\"12px\"}}/>);\r\n        uniqueReturn.push(<span className=\"cardCount\">{\"Counted: \" + ((apiData===0) ? \"Loading\": \"N/A\")}</span>);\r\n      }\r\n\r\n      let returnedValue =\r\n        <StyledCol><StyledCard windowwidth = {this.state.width}><Card.Body>\r\n          <span className=\"cardType\">\r\n            {cardName}\r\n          </span>\r\n          <br/>\r\n          {uniqueReturn}\r\n        </Card.Body></StyledCard></StyledCol>;\r\n      return returnedValue;\r\n  }\r\n  checkDirection(direction){\r\n    if(direction.toLowerCase() === \"w\")\r\n      direction = \"West\";\r\n    if(direction.toLowerCase() === \"n\")\r\n      direction = \"North\";\r\n    if(direction.toLowerCase() === \"e\")\r\n      direction = \"East\";\r\n    if(direction.toLowerCase() === \"s\")\r\n      direction = \"South\";\r\n    return direction;\r\n  }\r\n\r\n   printHeaders(rowNum){\r\n      let returnedObject = [];\r\n      let currRowNum = 0;\r\n      let currRowElement = 0;\r\n      let counter=0;\r\n\r\n      for(let i = 0; i < 7; i++){\r\n         if(this.state.totalPhotoNum[i] !== 0){\r\n            counter++;\r\n            if(currRowNum === rowNum){\r\n               returnedObject.push(\r\n                  <TitleCol>\r\n                     <h1 className=\"titleText\">{this.state.dataCamera[i].photos[this.state.currPhotoNum[i]].camera.full_name + \" (\" + (this.state.currPhotoNum[i]+1) + \"/\" + this.state.totalPhotoNum[i] + \")\"}</h1>\r\n                  </TitleCol>\r\n               );\r\n            }\r\n            if(1 === currRowElement){\r\n               currRowNum++;\r\n               currRowElement = 0;\r\n            }\r\n            else\r\n               currRowElement++;\r\n         }\r\n      }\r\n      console.log(counter);\r\n      if((this.state.empty === true) && (((rowNum+1)*2) >= counter))\r\n         returnedObject.push(\r\n            <TitleCol>\r\n               <h1 className=\"titleText\">{\" \"}</h1>\r\n            </TitleCol>\r\n         );\r\n\r\n      return returnedObject;\r\n   }\r\n\r\n  handleClickPic = async (event1,object) =>{\r\n    let offset = 0;\r\n    let tempcurrPhotoNum = this.state.currPhotoNum;\r\n    for(let i = 0; i < this.state.galleryImage.length; i++){\r\n      for(let j = 0; j < this.state.galleryImage[i].length; j++){\r\n        try{\r\n          while(this.state.totalPhotoNum[2*i+j+offset] === 0)\r\n            offset++;\r\n          if(object.photo === this.state.galleryImage[i][j]){\r\n            if(this.state.totalPhotoNum[i*2+j+offset] === (this.state.currPhotoNum[i*2+j+offset] + 1))\r\n              tempcurrPhotoNum[i*2+j+offset] = 0;\r\n            else\r\n              tempcurrPhotoNum[i*2+j+offset] = this.state.currPhotoNum[i*2+j+offset]+1;\r\n          }\r\n        }\r\n        catch(Exception){\r\n        }\r\n      }\r\n    }\r\n    await this.setState({currPhotoNum:tempcurrPhotoNum});\r\n    await this.initializePhotos();\r\n  }\r\n\r\n  async initializePhotos(){\r\n    try{\r\n      let tempImage = [];\r\n      for(let i = 0; i < 7; i++){\r\n        if(this.state.totalPhotoNum[i] !== 0)\r\n          tempImage.push({src:this.state.dataCamera[i].photos[this.state.currPhotoNum[i]].img_src,width:1,height:1,alt:this.state.cameraArray[i]});\r\n      }\r\n      this.galleryImage = [[],[],[],[]];\r\n      for(let i = 0; i < tempImage.length; i++){\r\n        this.galleryImage[Math.floor(i/2)].push(tempImage[i]);\r\n      }\r\n      for(let i=0; i<this.galleryImage.length; i++){\r\n         if(this.galleryImage[i].length === 1 ){\r\n           this.galleryImage[i].push({src:EmptyMarsImage,width:1,height:1});\r\n           await this.setState({empty: true});\r\n         }\r\n      }\r\n      await this.setState({galleryImage : this.galleryImage});\r\n    }\r\n    catch(Exception){\r\n      return \"Loading Mars Rover Images\";\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Styles style={{position:\"relative\", margin:\"auto\", paddingBottom:\"50px\"}} fluid>\r\n         <Particles className=\"backgroundContainer\" params={{\r\n             \"particles\": {\r\n                  \"number\": {\r\n                      \"value\": 200,\r\n                  },\r\n                 \"color\": {\r\n                   \"value\": \"#FFFFFF\"\r\n                 },\r\n                  \"line_linked\": {\r\n                      \"enable\": true,\r\n                      \"opacity\": 0.01\r\n                  },\r\n                  \"move\": {\r\n                      \"speed\": 0.15\r\n                  },\r\n                  \"size\": {\r\n                      \"value\": 0.4\r\n                  },\r\n                  \"opacity\": {\r\n                      \"anim\": {\r\n                          \"enable\": false,\r\n                          \"speed\": 0.5,\r\n                          \"opacity_min\": 0.25\r\n                      }\r\n                  }\r\n             },\r\n             \"retina_detect\": true\r\n         }}/>\r\n        <div className=\"weatherContainer\">\r\n           <StyledRow>\r\n               {this.weatherCard(\"Temperature\")}\r\n               {this.weatherCard(\"Wind Speed\")}\r\n               {this.weatherCard(\"Atmospheric Pressure\")}\r\n               {this.weatherCard(\"Wind Direction\")}\r\n               {this.weatherCard(\"Season\")}\r\n           </StyledRow>\r\n        </div>\r\n        <StyledCol xl={2} lg={1} md={1} sm={0} xs={0}></StyledCol>\r\n        <StyledCol xl={9} lg={10} md={10} sm={12} xs={12}>\r\n          <div className=\"curiosityContainer\">\r\n             <StyledRow>\r\n                   <StyledCol lg={6} style={{padding:\"0px\"}}>\r\n                      <StyledRow>\r\n                         <TextCol lg={5}>\r\n                            <h1 className=\"leftText\"> {\"Name: \"} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={7}>\r\n                            <h1 className=\"rightText\"> {\"Curiosity\"} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={5}>\r\n                            <h1 className=\"leftText\"> {\"Landing Date: \"} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={7}>\r\n                            <h1 className=\"rightText\"> 6<sup>th</sup> August, 2012 </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={5}>\r\n                            <h1 className=\"leftText\"> {\"Status: \"} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={7}>\r\n                            <h1 className=\"rightText\"> {\"Active\"} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={5}>\r\n                            <h1 className=\"leftText\"> {\"Photos Taken: \"} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={7}>\r\n                            <h1 className=\"rightText\"> {this.state.totalPhotosTaken} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={5}>\r\n                            <h1 className=\"leftText\"> {\"Objectives: \"} </h1>\r\n                         </TextCol>\r\n                         <TextCol lg={7}>\r\n                            <h1 className=\"rightText\"> {\"-Investigation of the Martian climate and geology\"} </h1>\r\n                            <h1 className=\"rightText\"> {\"-Assessment of whether Mars has ever offered environmental conditions favorable for microbial life\"} </h1>\r\n                            <h1 className=\"rightText\"> {\"-Planetary habitability studies in preparation for human exploration.\"} </h1>\r\n                         </TextCol>\r\n                      </StyledRow>\r\n                   </StyledCol>\r\n                   <StyledCol lg={6}>\r\n                       <img className=\"curiosityImage\" src={Curiosity} alt={\"TEMPORARY\"}/>\r\n                   </StyledCol>\r\n             </StyledRow>\r\n          </div>\r\n           <StyledRow style={{marginBottom:\"50px\", marginTop:\"40px\"}}>\r\n              <h1 style={{\r\n                 marginLeft:\"5%\",\r\n                 fontSize:\"31px\",\r\n                 fontWeight:\"600\",\r\n                 color:\"#A9A9A9\",\r\n                 textAlign:\"left\",\r\n                 fontSize:\"50px\",\r\n                 fontWeight:\"650\"\r\n              }}> {\"Photos Taken by Curiosity\"} </h1>\r\n              <RoverHelpButton onMouseOver={() => this.setState({roverHelpButtonClicked:true})} onMouseOut={() => this.setState({roverHelpButtonClicked:false})}> {this.state.roverHelpButtonClicked ? \"Click on the images to traverse through them\" : \"?\"} </RoverHelpButton>\r\n           </StyledRow>\r\n\r\n           <StyledRow>\r\n             {this.printHeaders(0)}\r\n           </StyledRow>\r\n           <Gallery onClick={this.handleClickPic} margin={7} photos={(this.state.galleryImage[0].length!==0) ? this.state.galleryImage[0] : [{src: Error, width: 1, height: 1}]}/>\r\n           <StyledRow>\r\n             {this.printHeaders(1)}\r\n           </StyledRow>\r\n           <Gallery onClick={this.handleClickPic} margin={7} photos={this.state.galleryImage[1]}/>\r\n           <StyledRow>\r\n             {this.printHeaders(2)}\r\n           </StyledRow>\r\n           <Gallery onClick={this.handleClickPic} margin={7} photos={this.state.galleryImage[2]}/>\r\n           <StyledRow>\r\n             {this.printHeaders(3)}\r\n           </StyledRow>\r\n           <Gallery onClick={this.handleClickPic} margin={7} photos={this.state.galleryImage[3]}/>\r\n        </StyledCol>\r\n        <StyledCol xl={2} lg={1} md={1} sm={0} xs={0}>\r\n        </StyledCol>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\nexport default Mars;\r\n","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\NoMatch.js",[],"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\NaturalEvents.js",["52"],"//[LONGITUDE, LATITUDE] FOR ALL NASA STUFF\r\n//(YYYY-MM-DD) FOR ALL NASA STUFF\r\n\r\nimport React from 'react';\r\nimport {Button, Container, Col, Row, Dropdown} from 'react-bootstrap';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport Error from './assets/Error.png';\r\nimport {Slider} from '@material-ui/core';\r\nimport Loading from './assets/Loading.png';\r\nimport jumboNaturalEvents from './assets/jumboNaturalEvents.jpg';\r\nimport backgroundNaturalEvents from './assets/purpleBackground.jpg';\r\nimport ParaBackground from './assets/naturalEventsParaBackground.png';\r\nimport Particles from \"react-particles-js\";\r\n\r\nconst Styles = styled.div`\r\n  .satelliteImage {\r\n    position: relative;\r\n    margin: auto;\r\n    height: 550px;\r\n  display: block;\r\n  }\r\n  .backgroundContainer{\r\n    width:100%;\r\n    height: 100%;\r\n    background: rgb(20, 11, 40);\r\n    position: absolute;\r\n  }\r\n  .sliderText {\r\n    position: relative;\r\n    margin:auto;\r\n    color:#A9A9A9;\r\n    text-align:center;\r\n    font-size:24px;\r\n  }\r\n  .dropdownButtons{\r\n       position: relative;\r\n       margin:auto;\r\n       border-radius:7px;\r\n       background-color:#78005a;\r\n       outline:none;\r\n       border-width:3px;\r\n       border-color:#5a0096;\r\n       transition:all 0.3s ease;\r\n       &:hover{\r\n          box-shadow: inset 0 0 0 4px #5a0096;\r\n       }\r\n       &:active{\r\n        -webkit-transform: scale(0.9);\r\n        -ms-transform: scale(0.9);\r\n        transform: scale(0.9);\r\n       }\r\n    }\r\n    .dropdownItems{\r\n         position: relative;\r\n         margin:auto;\r\n         background-color:rgb(54, 149, 255);\r\n         outline:none;\r\n      }\r\n  .categoryTitle {\r\n    position: relative;\r\n    margin:auto;\r\n    color:#A9A9A9;\r\n    text-align:center;\r\n    font-size:30px;\r\n    font-weight:700;\r\n    text-decoration: underline;\r\n  }\r\n  .categoryPara {\r\n    position: relative;\r\n    margin:auto;\r\n    color:#A9A9A9;\r\n    text-align:center;\r\n    font-size:15px;\r\n    margin-top:8px;\r\n    font-weight:100;\r\n  }\r\n  .leftText{\r\n     position: relative;\r\n     text-align:right;\r\n     margin:auto;\r\n     font-size:40px;\r\n     font-weight:400;\r\n     color:#A9A9A9;\r\n  }\r\n  .rightText{\r\n     position: relative;\r\n     text-align:left;\r\n     margin:auto;\r\n     font-size:35px;\r\n     color:#A9A9A9;\r\n     font-weight:200;\r\n  }\r\n  .titleParatext{\r\n     position: relative;\r\n     margin:auto;\r\n     color:#e9e9e9;\r\n     font-size:20px;\r\n     font-weight:400;\r\n     text-align: center;\r\n     background:url(${ParaBackground});\r\n     background-size:cover;\r\n     padding:20px;\r\n     margin:20px;\r\n     margin-top:30px;\r\n     border-radius: 15px;\r\n     border: 7px solid rgba(255, 230, 234,0.06);\r\n  }\r\n  .infoContainer {\r\n       position: relative;\r\n       margin: auto;\r\n       overflow: hidden;\r\n       background-color:rgba(255, 255, 255,0.03);\r\n       padding:10px;\r\n       background-size:cover;\r\n       border: 15px solid rgba(255, 230, 234,0.06);\r\n       border-left: 7px solid rgba(255, 230, 234,0.06);\r\n       border-right: 7px solid rgba(255, 230, 234,0.06);\r\n       background-size:cover;\r\n       border-radius:50px;\r\n  }\r\n`;\r\nconst StyledCol = styled(Col)`\r\n  position:relative;\r\n  margin:auto;\r\n`;\r\nconst StyledRow = styled(Row)`\r\n  position:relative;\r\n  margin:auto;\r\n`;\r\nconst StyledDropdown = styled(Dropdown)`\r\n  position:relative;\r\n  margin:20px;\r\n  margin-right:0px;\r\n`;\r\nconst StyledSlider = styled(Slider)`\r\n  position:relative;\r\n  margin:auto;\r\n  margin-top:3px;\r\n  margin-right:40px;\r\n`;\r\nconst SliderCol = styled(Col)`\r\n  position:relative;\r\n  margin:auto;\r\n  padding-left:10px;\r\n`;\r\nconst FocusButton = styled(Button)`\r\n   position: relative;\r\n   margin:auto;\r\n   color:#A9A9A9;\r\n   padding:0px;\r\n   padding-left:5px;\r\n   padding-right:5px;\r\n   background-color:#000000;\r\n   font-size:10px;\r\n   font-weight:200;\r\n   transition:all 0.2s ease;\r\n`;\r\n\r\nclass NaturalEvent extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      width: 0,\r\n      height: 0,\r\n      closedCategoryJson:{title:\"\", description:\"\", link:\"\",events:[{id:\"\", title:\"\",description:\"\", link:\"\", closed:\"\", categories:[{id:\"\", title:\"\"}], sources:[{id:\"\", url:\"\"}], geometry:[{magnitudeValue:\"\", magnitudeUnit:\"\", date:\"\", type:\"\", coordinates:[0,0]}]}]},\r\n      closedEventCounter: 0,\r\n      closedDim: 0.15,\r\n      closedImageUrl: Loading,\r\n      loading:true,\r\n      currPageNum:0,\r\n      focusButtonClicked:false,\r\n\r\n      closedDate:\"\",\r\n      closedLongitude:\"\",\r\n      closedLatitude:\"\",\r\n      title:\"\",\r\n      id:\"Loading Event\",\r\n      eventDescription:\"\",\r\n      categoryDescription:\"\",\r\n      categoryName:\"Loading Category\",\r\n      source:\"\",\r\n      magnitudeValue:\"\",\r\n      magnitudeUnit:\"\",\r\n    };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await window.scrollTo(0, 0);\r\n    await this.updateWindowDimensions();\r\n    await window.addEventListener('resize', this.updateWindowDimensions);\r\n    let jumboHeader = \"Landsat Imagery\";\r\n    let jumboText = \"Have a look at various Natural Events\";\r\n    await this.props.onChangePage(backgroundNaturalEvents, jumboNaturalEvents, jumboHeader, jumboText);\r\n    await this.updateCategory(\"volcanoes\");\r\n    await this.updateEvent(4);\r\n  }\r\n  async componentWillUnmount() {\r\n    await window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  async updateWindowDimensions() {\r\n    await this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  async updateCategory(categoryName){\r\n    await this.setState({\r\n      loading:true,\r\n      categoryDescription:\"Loading Category\",\r\n      categoryName:\"\",\r\n    });\r\n    let closedImageUrl= \"https://eonet.sci.gsfc.nasa.gov/api/v3/categories/\" + categoryName + \"?status=closed\";\r\n    let closedResponse = await fetch(closedImageUrl);\r\n    this.closedCategoryJson = await closedResponse.json();\r\n    this.categoryDescription = this.closedCategoryJson.description;\r\n    this.categoryName = this.closedCategoryJson.title;\r\n\r\n    await this.setState({\r\n       closedCategoryJson:this.closedCategoryJson,\r\n       categoryDescription:this.categoryDescription,\r\n       categoryName:this.categoryName,\r\n    });\r\n    await this.updateEvent(0);\r\n  }\r\n\r\n  async updateEvent(closedEventCounter){\r\n     await this.setState({\r\n        loading:true,\r\n        title:\"\",\r\n        id:\"Loading Event\",\r\n        source:\"\",\r\n        eventDescription:\"\",\r\n        magnitudeValue:\"\",\r\n        magnitudeUnit:\"\",\r\n        closedDate:\"\",\r\n        closedLongitude:\"\",\r\n        closedLatitude:\"\",\r\n     });\r\n     let closeI = -1;\r\n     let closedDate = \"\";\r\n     let closedLongitude = \"\";\r\n     let closedLatitude = \"\";\r\n     this.closedImageUrl = Error;\r\n     if(this.state.closedCategoryJson.events.length !== 0){\r\n        closedDate = this.state.closedCategoryJson.events[closedEventCounter].geometry[0].date.split(\"T\")[0];\r\n        closedLongitude = this.state.closedCategoryJson.events[closedEventCounter].geometry[0].coordinates;\r\n        while((typeof closedLongitude[0]) == \"object\"){\r\n           closedLongitude = closedLongitude[0];\r\n        }\r\n        closedLatitude = Number.parseFloat(closedLongitude[1]).toFixed(2).toString();\r\n        closedLongitude = Number.parseFloat(closedLongitude[0]).toFixed(2).toString();\r\n\r\n        this.closedImageUrl = \"https://api.nasa.gov/planetary/earth/imagery?lon=\" + closedLongitude + \"&lat=\" + closedLatitude + \"&date=\" +  closedDate + \"&dim=\" + this.state.closedDim + \"&api_key=LZsXbiDOXjh2IO9F9PxdPqQ9HCubyYhhIpEzmpqo\";\r\n        let closedResponse = await fetch(this.closedImageUrl);\r\n        let flag = (closedResponse.ok === false);\r\n        while(flag === true){\r\n           closeI++;\r\n           if(closeI%4 === 0)\r\n             this.closedImageUrl = \"https://api.nasa.gov/planetary/earth/imagery?lon=\" + (parseInt(closedLongitude) + 2*(Math.floor(closeI/4) + 1)) + \"&lat=\" + (closedLatitude) + \"&date=\" +  closedDate + \"&dim=\" + this.state.closedDim + \"&api_key=elL4eZjJSJsCrpWiLRjfve51JzsinKLBv83TcRLS\";\r\n           else if(closeI%4 === 1)\r\n              this.closedImageUrl = \"https://api.nasa.gov/planetary/earth/imagery?lon=\" + (closedLongitude) + \"&lat=\" + (parseInt(closedLatitude) + 2*(Math.floor(closeI/4) + 1)) + \"&date=\" +  closedDate + \"&dim=\" + this.state.closedDim + \"&api_key=hYhjvv4t46wNXLEUvBkncT1MhSIuMde3QFreFLe4\";\r\n           else if(closeI%4 === 2)\r\n              this.closedImageUrl = \"https://api.nasa.gov/planetary/earth/imagery?lon=\" + (parseInt(closedLongitude) - 2*(Math.floor(closeI/4) + 1)) + \"&lat=\" + (closedLatitude) + \"&date=\" +  closedDate + \"&dim=\" + this.state.closedDim + \"&api_key=K5j4hZf1NgDvwSQ6gc9ZnzZHz3dcaSaE3HmUpJf7\";\r\n           else\r\n              this.closedImageUrl = \"https://api.nasa.gov/planetary/earth/imagery?lon=\" + (closedLongitude) + \"&lat=\" + (parseInt(closedLatitude) - 2*(Math.floor(closeI/4) + 1)) + \"&date=\" +  closedDate + \"&dim=\" + this.state.closedDim + \"&api_key=igdYVlUQXL7InD5PeyxW4p73DAVCASPEKlwcaayF\";\r\n\r\n           if(closeI === 12 - 1)\r\n             this.closedImageUrl = Error;\r\n           closedResponse = await fetch(this.closedImageUrl);\r\n           flag = ((closedResponse.ok === false)||(closeI === 12 - 1));\r\n        }\r\n     }\r\n     this.title = this.state.closedCategoryJson.events[closedEventCounter].title;\r\n     this.id = this.state.closedCategoryJson.events[closedEventCounter].id;\r\n     this.source = this.state.closedCategoryJson.events[closedEventCounter].sources[0].id;\r\n     this.eventDescription = this.state.closedCategoryJson.events[closedEventCounter].eventDescription;\r\n     if((this.eventDescription === null) || (this.eventDescription === undefined))\r\n        this.eventDescription = \"Not Provided\";\r\n     this.magnitudeValue = this.state.closedCategoryJson.events[closedEventCounter].geometry[0].magnitudeValue;\r\n     this.magnitudeUnit = this.state.closedCategoryJson.events[closedEventCounter].geometry[0].magnitudeUnit;\r\n     if((this.magnitudeValue === null) || (this.magnitudeValue === undefined)){\r\n        this.magnitudeValue = \"Not Provided\";\r\n        this.magnitudeUnit = \"\";\r\n     } else{\r\n        this.magnitudeValue = Number.parseFloat(this.magnitudeUnit).toFixed(2).toString();\r\n     }\r\n\r\n     await this.setState({\r\n         closedImageUrl : this.closedImageUrl,\r\n         closedEventCounter: closedEventCounter,\r\n         closedDim: 0.15,\r\n         loading: false,\r\n         currPageNum: 0,\r\n         focusButtonClicked:false,\r\n\r\n         closedDate:closedDate,\r\n         closedLongitude:closedLongitude,\r\n         closedLatitude:closedLatitude,\r\n         title:this.title,\r\n         id:this.id,\r\n         eventDescription:this.eventDescription,\r\n         source:this.source,\r\n         magnitudeValue:this.magnitudeValue,\r\n         magnitudeUnit:this.magnitudeUnit,\r\n     });\r\n  }\r\n\r\n  async updateDim(value){\r\n     await this.setState({loading:true});\r\n     let leftUrl = this.state.closedImageUrl.split(\"&dim=\");\r\n     let rightUrl = leftUrl[1].split(\"&api_key=\");\r\n     this.closedImageUrl = leftUrl[0] + \"&dim=\" + value + \"&api_key=\" + rightUrl[1];\r\n     await this.setState({\r\n         closedImageUrl : this.closedImageUrl,\r\n         loading : false,\r\n     });\r\n }\r\n\r\n  printDropdownEvents(){\r\n     let returnedObject = [];\r\n     let loopNum = 11;\r\n     this.currPageNum = this.state.currPageNum;\r\n     if(loopNum > (this.state.closedCategoryJson.events.length - loopNum*this.currPageNum))\r\n       loopNum = (this.state.closedCategoryJson.events.length - loopNum*this.currPageNum);\r\n     if(this.currPageNum !== 0)\r\n       returnedObject.push(<Dropdown.Item onClick={async () => await this.setState({currPageNum:this.currPageNum-1})}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>{\"[<--] Prev Page (\" + (this.state.currPageNum) + \"/\" + (Math.ceil(this.state.closedCategoryJson.events.length/11)) + \")\"}</span> </Dropdown.Item>);\r\n     for(let i=0; i<loopNum; i++)\r\n        returnedObject.push(<Dropdown.Item onClick={() => this.updateEvent(i+11*this.currPageNum)}> <span style={{color:\"#9b007c\", fontWeight:\"450\"}}>{this.state.closedCategoryJson.events[i+11*this.currPageNum].title}</span> </Dropdown.Item>);\r\n     if(this.state.closedCategoryJson.events.length > 11*(this.currPageNum+1))\r\n        returnedObject.push(<Dropdown.Item onClick={async () => await this.setState({currPageNum:this.currPageNum+1})}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>{\"[-->] Next Page (\" + (this.state.currPageNum+2) + \"/\" + (Math.ceil(this.state.closedCategoryJson.events.length/11)) + \")\"}</span> </Dropdown.Item>);\r\n     return returnedObject;\r\n  }\r\n\r\n  printDropdownCategories(){\r\n     let returnedObject = [\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"volcanoes\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Volcanoes</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"drought\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Drought</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"dustHaze\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Dust and Haze</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"earthquakes\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Earthquakes</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"floods\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Floods</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"landslides\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Landslides</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"manmade\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Man-made</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"seaLakeIce\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Sea and Lake Ice</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"severeStorms\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Severe Storms</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"snow\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Snow</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"tempExtremes\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Temperature Extremes</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"waterColor\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Water Color</span> </Dropdown.Item>,\r\n        <Dropdown.Item onClick={() => this.updateCategory(\"wildfires\")}> <span style={{color:\"#9b007c\", fontWeight:\"650\"}}>Wildfires</span> </Dropdown.Item>,\r\n     ];\r\n     return returnedObject;\r\n }\r\n\r\n  render(){\r\n    return(\r\n      <Styles widthOfPage = {this.state.width} style={{position:\"relative\", margin:\"auto\", paddingBottom: \"18px\"}} fluid>\r\n         <Particles className=\"backgroundContainer\" params={{\r\n             \"particles\": {\r\n                 \"move\": {\r\n                   \"speed\": 0.5\r\n                },\r\n                \"color\":{\r\n                   \"value\": [\"#FFFFFF\", \"#dcdcdc\", \"#b9b9b9\", \"#989898\", \"#787878\", \"#595959\", \"#3d3d3d\", \"#222222\"]\r\n                },\r\n                \"size\": {\r\n                   \"value\": 1.75\r\n                }\r\n             }\r\n         }}/>\r\n        <StyledCol xl={2} lg={1} md={1} sm={0} xs={0}></StyledCol>\r\n        <StyledCol xl={9} lg={10} md={10} sm={12} xs={12}>\r\n            <StyledRow>\r\n               <h1 className=\"titleParatext\">\r\n                  Utilizing NASA's Landsat Imagery API and Natural Event Tracker API, we were able to devise a program which allows you to pick from a variety of unique Natural Events. Some images might not appear as satisfying but thats where the Focus Slider comes to play as it might help battle clouds and create a clearer picture. If the image isn't adequate, do not worry as there are over a hundred images to choose from!\r\n               </h1>\r\n            </StyledRow>\r\n            <StyledRow>\r\n               <StyledCol lg={2} style={{paddingLeft:\"0px\"}}>\r\n                  <StyledDropdown style={{marginLeft:\"0px\"}}>\r\n                    <Dropdown.Toggle className=\"dropdownButtons\" id=\"dropdown-basic\" disabled={this.state.loading}>\r\n                      {this.state.loading ? \"Loading\" : \"Categories\"}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu className=\"dropdownItems\">\r\n                        {this.printDropdownCategories()}\r\n                    </Dropdown.Menu>\r\n                  </StyledDropdown>\r\n                  <StyledDropdown style={{marginLeft:\"0px\"}}>\r\n                    <Dropdown.Toggle className=\"dropdownButtons\" id=\"dropdown-basic\" disabled={this.state.loading}>\r\n                      {this.state.loading ? \"Loading\" : \"Events\"}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu className=\"dropdownItems\">\r\n                        {this.printDropdownEvents()}\r\n                    </Dropdown.Menu>\r\n                  </StyledDropdown>\r\n               </StyledCol>\r\n               <SliderCol lg={4}>\r\n                  <StyledRow lg={7}>\r\n                     <StyledCol style={{paddingRight:\"0px\"}}>\r\n                        <h1 className={\"leftText\"}> {this.state.loading ? \"Loading\" : \"Focus\"} </h1>\r\n                     </StyledCol>\r\n                     <StyledCol style={{marginTop:\"0px\", paddingLeft:\"0px\"}} lg={5}>\r\n                        <FocusButton onMouseOver={() => this.setState({focusButtonClicked:true})} onMouseOut={() => this.setState({focusButtonClicked:false})}> {this.state.focusButtonClicked ? \"Use this slider if only a fraction of the image is visible.\\n(Default value: 0.15)\" : \"?\"} </FocusButton>\r\n                     </StyledCol>\r\n                  </StyledRow>\r\n                  <StyledRow>\r\n                     <StyledSlider\r\n                        disabled={this.state.loading}\r\n                        defaultValue={this.state.closedDim}\r\n                        aria-labelledby=\"discrete-slider-small-steps\"\r\n                        step={0.05}\r\n                        onChangeCommitted={(e,val) => this.updateDim(val)}\r\n                        marks\r\n                        min={0.05}\r\n                        max={0.75}\r\n                        valueLabelDisplay=\"auto\"\r\n                     />\r\n                  </StyledRow>\r\n               </SliderCol>\r\n               <StyledCol lg={6}>\r\n                  <StyledRow>\r\n                     <h1 className=\"categoryTitle\"> {this.state.categoryName} </h1>\r\n                  </StyledRow>\r\n                  <StyledRow>\r\n                     <h1 className=\"categoryPara\"> {this.state.categoryDescription} </h1>\r\n                  </StyledRow>\r\n               </StyledCol>\r\n            </StyledRow>\r\n            <StyledRow>\r\n               <StyledCol style={{padding:\"0px\"}}>\r\n                  <div className=\"infoContainer\">\r\n                     <StyledRow>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"leftText\"> {this.state.id + \": \"} </h1>\r\n                        </StyledCol>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"rightText\"> {this.state.title} </h1>\r\n                        </StyledCol>\r\n                     </StyledRow>\r\n                     <StyledRow>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"leftText\"> {\"Description: \"} </h1>\r\n                        </StyledCol>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"rightText\"> {this.state.eventDescription} </h1>\r\n                        </StyledCol>\r\n                     </StyledRow>\r\n                     <StyledRow>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"leftText\"> {\"Source: \"} </h1>\r\n                        </StyledCol>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"rightText\"> {this.state.source} </h1>\r\n                        </StyledCol>\r\n                     </StyledRow>\r\n                     <StyledRow>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"leftText\"> {\"Magnitude: \"} </h1>\r\n                        </StyledCol>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"rightText\"> {this.state.magnitudeValue + \" \" + this.state.magnitudeUnit} </h1>\r\n                        </StyledCol>\r\n                     </StyledRow>\r\n                     <StyledRow>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"leftText\"> {\"Coordinates: \"} </h1>\r\n                        </StyledCol>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"rightText\"> {\"[\" + this.state.closedLatitude + \", \" + this.state.closedLongitude + \"]\"} </h1>\r\n                        </StyledCol>\r\n                     </StyledRow>\r\n                     <StyledRow>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"leftText\"> {\"Date: \"} </h1>\r\n                        </StyledCol>\r\n                        <StyledCol lg={6}>\r\n                           <h1 className=\"rightText\"> {this.state.closedDate} </h1>\r\n                        </StyledCol>\r\n                     </StyledRow>\r\n                  </div>\r\n               </StyledCol>\r\n               <StyledCol>\r\n                   <img src={this.state.loading ? Loading : this.state.closedImageUrl } alt={\"TEMPORARY\"} className=\"satelliteImage\"/>\r\n                   <h1 className=\"categoryPara\" style={{fontSize:\"11px\",color:\"#B90E0A\", fontWeight:600}}> {\"Due to slow API, please give the website 10-15 seconds for the picture to load.\"} </h1>\r\n               </StyledCol>\r\n            </StyledRow>\r\n         </StyledCol>\r\n         <StyledCol xl={2} lg={1} md={1} sm={0} xs={0}></StyledCol>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\nexport default NaturalEvent;\r\n","C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\components\\Layout.js",[],"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\components\\Jumbotron.js",[],"C:\\Users\\maazt\\Desktop\\Maaz Imp\\Projects\\hubble\\src\\components\\NavigationBar.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":2,"column":9,"nodeType":"59","messageId":"60","endLine":2,"endColumn":15},{"ruleId":"57","severity":1,"message":"61","line":151,"column":7,"nodeType":"59","messageId":"60","endLine":151,"endColumn":22},{"ruleId":"62","severity":1,"message":"63","line":474,"column":18,"nodeType":"64","messageId":"65","endLine":474,"endColumn":26},{"ruleId":"62","severity":1,"message":"66","line":475,"column":18,"nodeType":"64","messageId":"65","endLine":475,"endColumn":28},{"ruleId":"57","severity":1,"message":"67","line":5,"column":17,"nodeType":"59","messageId":"60","endLine":5,"endColumn":26},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'StyledContainer' is assigned a value but never used.","no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected","Duplicate key 'fontWeight'.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]